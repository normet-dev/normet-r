% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nm_norm_decom.r
\name{nm_decom_met}
\alias{nm_decom_met}
\title{Decompose Meteorological Influences (Implementation)}
\usage{
nm_decom_met(
  df = NULL,
  model = NULL,
  value = "value",
  backend = "h2o",
  feature_names = NULL,
  split_method = "random",
  fraction = 0.75,
  model_config = NULL,
  n_samples = 300,
  seed = 7654321,
  importance_ascending = FALSE,
  n_cores = NULL,
  memory_save = FALSE,
  verbose = TRUE
)
}
\arguments{
\item{df}{Data frame containing the input data.}

\item{model}{Pre-trained model for decomposition. If not provided, a model will be trained.}

\item{value}{The target variable name as a string.}

\item{backend}{The modeling backend to use if a model needs to be trained. Default is 'h2o'.}

\item{feature_names}{The names of the features used for training and decomposition.}

\item{split_method}{Method for splitting data. Default is 'random'.}

\item{fraction}{Proportion of data for training. Default is 0.75.}

\item{model_config}{A list of configuration parameters for model training.}

\item{n_samples}{Number of samples for normalisation. Default is 300.}

\item{seed}{A random seed for reproducibility. Default is 7654321.}

\item{importance_ascending}{Logical, sort feature importances in ascending order. Default is FALSE.}

\item{n_cores}{Number of CPU cores for parallel processing.}

\item{memory_save}{Logical for memory-efficient normalisation. Default is FALSE.}

\item{verbose}{Should the function print progress messages and logs? Default is TRUE.}
}
\value{
A data frame with decomposed components including `observed`, `emi_total`, individual
  meteorological contributions, `met_total`, `met_base`, and `met_noise`.
}
\description{
\code{nm_decom_met} performs decomposition of meteorological influences on a time series.
This version is updated to match the more robust Python implementation logic.
}
