% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nm_pipeline_do_all.r
\name{nm_do_all}
\alias{nm_do_all}
\title{Perform All Steps for Meteorological Normalisation}
\usage{
nm_do_all(
  df = NULL,
  value = "value",
  backend = "h2o",
  feature_names = NULL,
  variables_resample = NULL,
  split_method = "random",
  fraction = 0.75,
  model_config = NULL,
  n_samples = 300,
  seed = 7654321,
  n_cores = NULL,
  memory_save = FALSE,
  verbose = TRUE,
  aggregate = TRUE,
  init_h2o = TRUE,
  ...
)
}
\arguments{
\item{df}{The raw input data frame.}

\item{value}{The target variable name as a string.}

\item{backend}{The modeling backend to use for training. Default is 'h2o'.}

\item{feature_names}{The names of the features used for training and normalisation.}

\item{variables_resample}{Character vector of variables to resample during normalisation.}

\item{split_method}{Method for splitting data for model training (e.g., 'random').}

\item{fraction}{Proportion of data for training if a model is trained.}

\item{model_config}{A list of configuration parameters for model training.}

\item{n_samples}{Number of times to sample the data for normalisation.}

\item{seed}{A random seed for reproducibility.}

\item{n_cores}{Number of CPU cores for parallel processing.}

\item{memory_save}{Logical flag for memory-efficient normalisation.}

\item{verbose}{Should the function print progress messages?}

\item{aggregate}{Logical flag to return aggregated results or individual samples.}

\item{init_h2o}{Logical. If TRUE (default), ensures the H2O cluster is initialized.
Set to FALSE when called from a workflow that manages initialization.}

\item{...}{Additional arguments passed to underlying functions (e.g., `cl` for parallel clusters).}
}
\value{
A list containing the following elements:
\describe{
  \item{out}{The normalised data frame.}
  \item{model}{The trained model object.}
  \item{df_prep}{The prepared data frame used for training.}
}
}
\description{
`nm_do_all` is a high-level convenience pipeline that prepares data, trains a model,
and runs the normalisation process.
}
